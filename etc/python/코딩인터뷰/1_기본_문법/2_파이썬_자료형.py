# coding=utf-8

# 빅오(O, big-O) : 입력 값이 무한대로 향할때 함수의 상한을 설명하는 수학적 표기 방법 (점근적 실행 기간(Asymptotic Running Time 표기)
# 점근적 실행 시간 : 입력값 n이 커질때, 즉 입력값이 무한대를 향할때 lim 함수의 실행 시간의 추이를 의미 (=시간 복잡도)
# 시간 복잡도(Time Complexity Computational Complexity) : 최고차항만을 표기하고, 상수항을 무시한다
# 알고리즘은 공간을 많이 사용하면 실행 시간이 빠르고, 공간을 적게 사용하면 실행 시간이 느리다.

""" 파이썬 자료형
None (값 자체가 정의되어 있지 않은 상태 = null)

숫자 - 정수형
          - 정수 (int)
          - 불리언 (bool)
    - 실수
          - float

집합형 - 집합
          - set

매핑 - 딕셔너리
          - dict

시퀀스 - 불변
          - 문자열 (str)
          - 튜플 (tuple)
          - 바이트 (bytes)

      - 가변
          - 리스트 (list)

---

[숫자형]
파이썬에서는 숫자 정수형으로 int만 제공한다.
int보다 더 큰 값은 어떤 자료형에 보관할까?
파이썬은 int, long을 각각 별도로 제공했었지만, int가 충분하지 않으면 자동으로 long으로 변경되는 구조가 되었다.
(int : 고정 정밀도 정수형 / long : 임의 정밀도 정수형) -> (int : 임의 정밀도 정수형)으로 변경

int는 object의 하위 클래스이다. (bool 타입은 int의 서브 클래스이다.)
* object > int > bool

True == 1  (True)
False == 0 (False)

bool 논리 자료형은 내부적으로 정수 값을 가지고 있다.

---

[매핑]
매핑 타입 : 키/자료형으로 구성된 복합 자료형으로, 파이썬은 '딕셔너리'가 유일하다. (key-value)

---

[집합]
집합 : 중복된 값을 갖지 않는 자료형 (set)
=> 딕셔너리는 키-값을 선언하지만, 집합은 값만 선언하고, 중괄호({})를 사용한다.
=> 입력 순서가 유지되지 않고, 중복된 값이 있을 경우 하나의 값만 유지한다.

a = {'a', 'b', 'v'}
type(a) # <class 'set'>

a = {'a': 1, 'b': 2}
type(a) # <class 'dict'>

---

[시퀀스]
시퀀스는 불변(Immutable) / 가변(Mutable) 으로 구분한다.

불변 : str, tuple, bytes 가 해당하는데, 한번 이 타입으로 선언되는 값을 변경할 수 없다.

> str의 불변의 의미
a = 'abc'
a = 'def'
type(a) # <calss <'str'>

str 타입인 a 변수에 'abc'를 할당했다. 이후, 'def'를 할당했다.
a 변수의 값이 변경된 셈이다.

a 변수에 할당된 'abc'는 변경이 되지 않았다. (불변)
a 변수는 다른 str 타입인 def를 참조했을 뿐이고, 실제로 abc도 def도 한번 생성된 후에 변경된 적이 없다.
불변이므로 변경될 수도 없다.

a = 'abc'
id('abc')
id(a)
# 위 2개가 동일

a = 'def'
id('def')
id(a)
# 위 2개가 동일

각각의 메모리 주소를 출력해보면, a 변수는 처음에는 abc를 참조했다가 이후에는 def를 참조하도록 변경되었을 뿐이다. (주소의 변경)

str이 정말로 변경되려면 참조하고있는 str에 대해 다음과 같은 할당자가 처리되어야하는데, 에러가 발생한다.
a[1] = 'd'

이때문에 str을 불변이라 한다.

---

[원시타입]; 파이썬은 원시타입을 지원하지 않는다.

원시 타입은 메모리에 정확하게 타입 크기만큼의 공간을 할당하고 그 공간을 오로지 값으로 채워넣는다.
(배열의 경우, 물리 메모리에 자료형의 크기만큼 공간을 갖는 요소가 연속된 순서로 배치되는 형태)

파이썬은 원시타입을 지원하지 않는다.
파이썬은 편리한 기능이 우선순위인 언어이기 때문에 느린 속도/많은 메모리 차지에도 다양한 기능 제공을 위해 편의성을 택했다.


---

[객체]

파이썬은 모든것이 객체이다.

불변객체
bool, int, float, tuple, str

가변객체
list, set, dict


---

[불변객체]
10
a = 10
b = a

id(10) = id(a) = id(b) # true

파이썬은 모든것이 객체이므로, 메로리 상에 위치한 객체의 주소를 얻어오는 id()의 결과가 모두 같다.
10이 만약 11이 된다면 a, b는 모두 11의 메모리 주소를 참조하도록 바뀔 것이다. (하지만 숫자, 문자는 모두 불변이므로 이런 상황은 발생하지 않는다.)

---

[가변객체]
a = [1, 2, 3, 4, 5]
b = a
b # [1, 2, 3, 4, 5]
a[2] = 4

a # [1, 2, 3, 4, 5]
b # [1, 2, 3, 4, 5]

b에는 a를 할당하여 참조하게 했기 때문에 a의 요소가 변경되면 b 도 함께 변경됨을 알 수 있다.

---

[is vs ==]
is는 id() 값을 비교하는 함수이다. (주소)
==는 값을 비교하는 연산자이다.

a = [1, 2. 3]
a == a # True

a == list(a) # True

a is a # True

a is list(a) # False
=> list로 한번 묶어줌으로써, 별도의 객체로 복사가 되고 다른 ID를 같게된다.

"""
