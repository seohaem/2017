"""
[리스트]
= 입력 순서가 유지된다.
= 내부적으로는 동적 배열로 구현되어있다.
= 자바에서의 ArrayList와 동일하다.
= 리스트 안의 요소에 삽입할 수 있는 자료형의 제한이 없다.
= 연속된 공간에 요소를 배치하는 배열의 장점과 다양한 타입을 연결해 배치하는 연결 리스트의 장점을 모두 지녔다.
= 존재하지않는 인덱스 사용시 에러 발생한다.

* 선언방법
a = list()
a = []

---

[딕셔너리]
= 키/값 구조로 이뤄진 딕셔너리이다.
= 내부적으로는 해시 테이블로 구현되어있다.
= 리스트와는 달리, 문자를 포함한 다양한 타입을 키로 사용할 수 있다.
= 내부적으로 인덱스를 이용해 입력 순서를 유지하도록 개선됬다. (버전 3.6) - 코딩시에는 순서가 보장되지 않는다고 생각하고 진행하는 것을 권장한다.
= 존재하지않는 키를 조회할시 에러 발생한다.

* 선언방법
a = dict()
a = {}

a = {'key1' : 'value1', 'key2' : 'value2'}

* key를 반복문으로 조회하기
for k, v in a.items():
    print(k,v)

"""