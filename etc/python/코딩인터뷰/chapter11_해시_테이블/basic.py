"""
해시 테이블 또는 해시 맵
= 키를 값에 매핑할 수 있는 구조
= 연관 배열 추상 자료형(ADT)을 구현하는 자료구조

대부분의 연산이 분할 상환 분석에 따른 시간복잡도가 O(1)이다.
덕분에 데이터 양에 관계없이 빠른 성능을 기대할 수 있다.

해시 함수
= 임의 크기 데이터를 고정 크기 값으로 매핑하는데 사용할 수 있는 함수

해시 테이블의 핵심이 해시 함수다.
ABC -> A1
12324BC -> CB
AF32B -> D5

입력값이 각각 다른 글자 수지만 화살표로 표시한 특정 함수를 통과하면 2바이트의 고정 크기값으로 배핑된다.
여기서 화살표 역할을 하는 함수가 해시 함수다.

해싱
= 해시 테이블을 인덱싱하기 위해 이처럼 해시 함수를 사용하는 것

해싱은 정보를 가능한 한 빠르게 저장하고 검색하기 위해 사용하는 중요한 기법 중 하나다.
해싱은 최적의 검색이 필요한 분야에 사용되며, 심볼 테이블(일반적으로 해시 테이블로 구현된다) 등의 자료구조를 구현하기에도 적합하다.

해시 함수는 체크섬, 손실 압축, 무작위화 함수, 암호 등과도 관련이 깊고 서로 혼용되기도 한다.

성능 좋은 해시 함수들의 특징
1) 해시 함수 값 충돌의 최소화
2) 쉽고 빠른 연산
3) 해시 테이블 전체에 해시 값이 균일하게 분포
4) 사용할 키의 모든 정보를 이용하여 해싱
5) 해시 테이블 사용 효율이 높을 것


충돌의 발생
비둘기집 원리
= n개 아이템을 m개 컨테이너에 넣을때 n>m이라면 적어도 하나의 컨테이너에는 반드시 2개 이상의 아이템이 들어있다는 원리를 말한다.

좋지 않은 해시 함수의 경우 심하면 9번을 모두 충돌해서 9개의 공간 중 1개밖에 사용하지 못할수도 있다.
여러번 충돌한다는 것은 그만큼 추가 연산을 필요로하기 때문에 가급적 충돌은 최소화하는 것이 좋다.


[로드 팩터]
로드 팩터란 해시 테이블에 저장된 데이터 개수 n을 버킷의 개수 k로 나눈것이다.
n / k

[해시 함수]
해시 테이블을 인덱싱 하기 위해 히사 함수를 사용하는 것을 '해싱'이라고 한다.
해싱에는 다양한 알고리즘이 있고, 최상의 분포를 제공하는 방법은 데이터에 따라 제각각이다.

충돌 해결 방법

[개별 체이닝]
해시는 키를 해싱한 결과이다.
충돌이 발생한 키들을 연결리스트로 연결한다.

1. 키의 해시 값을 계산한다.
2. 해시 값을 이용하여 배열의 인덱스를 구한다.
3. 같은 인덱스가 있다면 연결리스트로 연결한다.

모든 해시 충돌이 발생하면 O(n)이 된다.

[오픈 어드레싱]
충돌 발생시 탐사를 통해 빈 공간을 찾아나서는 방식이다.
전체 슬롯의 개수 이상은 저장할 수 없다.
충돌이 일어나면 테이블 공간 내에서 탐사를 통해 빈 공간을 찾아 해결하여 이 때문에 모든 원소가 반드시 자신의 해시값과 일치하는 주소에 저장된다는 보장은 없다.

-> 이 방식 중에서 가장 간단한 방식 : 선형 탐사 (Linear Probing]
충돌이 발생할 경우 해당 위치부터 순차적으로 탐사를 ㅎ나씩 진행한다.
특정 위치가 선점되어 있으면 바로 그 다음 위치를 확인하는 식이다.
이렇게 탐사를 진행하다가 비어있는 공간을 발견하면 삽입하게 된다.
가장 가까운 다음 빈 위치를 탐사해 새 키를 삽입한다.

(문제점 : 해시 테이블에 저장되는 데이터들이 고르게 분포되지 않고 뭉치는 경향이 있다.
해시 테이블을 여기저기에 연속된 데이터 그룹이 생기는 이러한 현상을 '클러스터링' 이라고 한다.

클러스터들이 점점 커지게되면 인근 클러스터들과 서로 합쳐지는 일이 발생한다.
그렇게 되면 해시 테이블의 특정 위치에는 데이터가 몰리게되고, 다른 위치에는 상대적으로 데이터가 거의 없는 상태가 될 수 있다.
클러스터링 현상은 탐사 시간을 오래걸리게 하고 전체적으로 해싱 효율을 떨어뜨린다.)

오픈 어드레싱 방식은 버킷 사이즈보다 큰 경우에는 삽입할 수 없다. 따라서 일정 이상 채워지면 더 큰 크기의 또다른 버킷을 생성한 후
여기에 새롭게 복사하는 리해싱 작업이 일어난다.


파이썬에서 해시 테이블로 구현된 파이썬의 자료형 = '딕셔너리'

체이닝 시 malloc 으로 메모리를 할당하는 오버헤드가 높아 오픈 어드레싱을 택했다.

파이썬이 체이닝을 사용하지 않은 이유 : 연결리스트를 만들기 위해서는 추가 메모리 할당이 필요하고, 추가 메모리 할당은 상대적으로 느리다.

파이썬의 해시 테이블이 개별 체이닝 방식이 아니라는 점.
원래 해시 테이블은 해싱과 체이닝의 결합으로 탄생.

왜 오픈 어드레싱인가?
오픈 어드레싱의 한 방식인 선형 탐사 방식은 일반적으로 체이닝에 비해 성능이 더 좋다.
"""