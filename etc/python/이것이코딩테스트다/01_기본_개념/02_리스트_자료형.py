# 리스트 자료형
# 여러개의 데이터를 연속적으로 담아 처리하기위해 사용하는 자료형
# 파이썬은 배열 을 사용할때 리스트를 사용한다. (리스트를 배열 또는 테이블이라고도 한다.)
# 인덱스는 0 부터 시작한다

# 직접 데이터를 넣어 초기화
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

# 네번째 원소 출력
print(a[3])

# 크키가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a)  # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
a[4] = 0
print(a)  # [1, 2, 3, 4, 0, 6, 7, 8, 9]


# 리스트의 특정한 원소에 접근하는 것을 인덱싱(Indexing)이라고 한다.
# 뒤쪽에서 시작은 음수

print(a[7])  # 8번째 원소
print(a[-1])  # 뒤에서 1번째 원소


# 리스트에서 연속적인 위치를 갖는 원소들을 가져와야할 때는 슬라이싱(Slicing)을 이용한다. (:을 기준으로 시작 인덱스와 끝 인덱스를 설정한다)
# 끝 인덱스는 실제 인덱스보다 1 크게 설정한다.

print(a[3])  # 네번째 원소만 출
print(a[1:4])  # 두번째 원소부터 네번재 원소까지


# 리스트 컴프리헨션 : 리스트를 초기화하는 방법 중 하나이다. (대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화할 수 있다.)
array = [i for i in range(10)]  # i가 0부터 9까지
print(array)


array = [i for i in range(20) if i % 2 == 1]  # 0부터 19까지의 숫자 중 if 조건에 해당

# 위 한줄의 로직은 아래와 같다.
array = []
for i in range(20):
    if i % 2 == 1:
        array.append(i)

array = [i * i for i in range(1, 10)]  # 1, 9까지


# 리스트 컴프리헨션은 2차원 리스트를 초기화할때 효과적으로 사용이 가능하다.
# ex) array = [[0] * m for _ in range(n)]  # m 번 반복을 할때마다 길이가 n인 리스트를 만든다.

n = 4
m = 3
array = [[0] * m for _ in range(n)]  # [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
print(array)

array[1][1] = 5
print(array)  # [[0, 0, 0], [0, 5, 0], [0, 0, 0], [0, 0, 0]]

# 잘못된 예시
n = 4
m = 3
array2 = [[0] * m] * n  # 객체 자체를 같은 객체로 판단한다.
array2[1][1] = 5
print(array2)  # [[0, 5, 0], [0, 5, 0], [0, 5, 0], [0, 5, 0]]

# 언더바(_)의 사용
# 반복을 위한 변수의 값을 무시할 경우 사용한다.
for _ in range(5):
    print("hi")

# 리스트 관련 함수
"""
* append() : 리스트에 원소 하나 삽입
* sort() : 오름차순 정렬 (내림차순; sort(reverse=True))
* reverse() : 원소의 순서 뒤집기
* insert() : 특정한 위치에 원소 삽입 (insert(삽입할 위치 인덱스, 값))
* count() : 데이터 개수
* remove() : 특정한 값을 제거 (같은 값이 여러개일 경우 1개만 삭제한다)
"""

# remove 함수를 사용해서 특정 원소를 모두 제거해야할 경우
a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3, 5}  # 집합 자료형

result = [i for i in a if i not in remove_set]  # remove_set 에 포함되어있지 않은 원소를 담은 리스트를 생성한다
print(result)  # [1, 2, 4] => 3, 5가 삭제되었다. 5는 총 3개인데 모두 삭제되었음을 알 수 있다.

