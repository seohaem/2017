"""
복잡도 (Complexity)
- 알고리즘의 성능을 나타내는 척도

1) 시간 복잡도
: 특정한 크기의 입력에 대하여 알고리즘의 수행 시간 분석

2) 공간 복잡도
: 특정한 크기의 입력에 대하여 알고리즘의 메모리 사용량 분석

빅오 표기법(Big-O Notation)
- 가장 빠르게 증가하는 항만을 고려하는 표기법 (차수가 가장 큰 항만 남긴다)
ex) 3N^3 + 5N^2 + 1,000,000 => O(N^3) ;3은 무시되고 최고차항인 N^3이 선택된다.

파이썬은 c언어보다 시간이 좀더 소요된다.
(연산 횟수가 5억을 넘어가는 경우: C언어 (1~3초), 파이썬 (5~15초)

"""

# 시간복잡도 계산해보기 (1)

array = [3, 5, 1, 2, 4]  # 5개의 데이터 (N = 5)
summary = 0  # 합계를 저장할 변수

# 모든 데이터를 하나씩 확인하여 합을 계산
for x in array:
    summary += x

# 결과 출력
print(summary)

# 데이터의 개수 N에 비례할 것임을 예측할 수 있다. => 시간복잡도: O(N)


# 시간복잡도 계산해보기 (2)

array2 = [3, 5, 1, 2, 4]  # 5개의 데이터 (N = 5)

for i in array2:
    for j in array2:
        temp = i * j
        print(temp)

# 시간복잡도 : O(N^2)
# 모든 2중 반복문의 시간 복잡도가 O(N^2)인 것이 아니다 => 소스코드 내부적으로 호출되는 다른 함수의 시간 복잡도도 고려해야한다.


# 수행시간 측정 예제
import time

start_time = time.time()  # 측정 시작

# 소스코드
end_time = time.time()  # 측정 종료

print("time: " + end_time - start_time)  # 수행시간 출력
